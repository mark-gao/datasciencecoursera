m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(c(1:5)))
cachemean(makeVector(c(1:5)))
cachemean(makeVector(c(1:6)))
cachemean(makeVector(c(1:6)))
makeVector <- function(x = numeric()) {
m <- NULL
print("In makeVector:x=", x)
set <- function(y) {
x <<- y
m <<- NULL
print("In makeVector. y=", y)
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1:5))
a<-c(1:4)
print("x=", a)
makeVector <- function(x = numeric()) {
m <- NULL
print("In makeVector:x=")
x
set <- function(y) {
x <<- y
m <<- NULL
print("In makeVector. y=")
y
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(c(1:5))
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL  ## matrix inversion
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInversion <- function(Inversion) mi <<- Inversion
getInversion <- function() mi
list(set = set, get = get
setInversion = setInversion,
getInversion = getInversion)
}
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL  ## matrix inversion
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInversion <- function(Inversion) mi <<- Inversion
getInversion <- function() mi
list(set = set, get = get,
setInversion = setInversion,
getInversion = getInversion)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInversion()
if (!is.null(inv)) {
message("getting cached inversion")
return(inv)
}
inv <- solve(x$get())
x$setInversion( inv )
inv
}
x<- matrix(1:4,2,2)
Y <- makeCacheMatrix(x)
Y
cacheSolve(Y)
cacheSolve(Y)
x<- matrix(1:9,3,3)
Y <- makeCacheMatrix(x)
cacheSolve(Y)
makeCacheMatrix <- function(x = matrix())
{
Inverse <- NULL
set <- function(y)
{
if (is.matrix(y))
{
x <<- y
Inverse <<- NULL
}
else
{
message("Input is not a valid matrix.")
}
}
get <- function()
{
x
}
SetInverse <- function(Input_Inverse)
{
if (is.matrix(Input_Inverse))
{
Inverse <<- Input_Inverse
}
}
GetInverse <- function()
{
Inverse
}
list(set = set,
get = get,
SetInverse = SetInverse,
GetInverse = GetInverse)
}
## This function can be called on a matrix object created using the makeCacheMatrix function. it returns the cached inverse if it exists. if a cached inverse doesn't exist, it computes the matrix inverse and saves it on the cacheMatrix object.
cacheSolve <- function(x, ...) {
inverse <- x$GetInverse()
if(!is.null(inverse)) {
message("getting cached Matrix Inverse")
print(inverse)
return(inverse)
}
message("Calculating Inverse")
input_matrix <- x$get()
inverse <- solve(input_matrix)
x$SetInverse(inverse)
print(inverse)
inverse
}
M <- matrix(c(2,3,2,2), 2, 2)
A <- makeCacheMatrix(M)
inv_A <- cacheSolve(A)
inv_A <- cacheSolve(A)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL     #  m is the inverse of the matrix and will be reset to NULL
set <- function(y = matrix()) {
x <<- y
m <<- NULL
}
get <- function() { x }   # this function returns the original matrix
setinverse <- function(inverse)  { m <<- inverse }
# this is called by cacheinverse() during the first cacheinverse()
#  access and it will store the value using superassignment
getinverse <- function() { m } # this will return the cached value to cacheinverse() on
#  subsequent accesses
list(get = get, set = set,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve function will compute or retrieve the inverse of the matrix depending on
## whether the value has been previously cached
cacheSolve <- function(x, ...) {   # the input x is an object created by makeCacheMatrix
if(ncol(matt)!=nrow(matt)){message("inverse cannot be computed for non-square matrices")}
m <- x$getinverse()               # accesses the object 'x' and gets the value of the inverse
if(!is.null(m)) {              # if inverse was already cached (not NULL) ...
message("getting cached data")
return(m)                       # returns the inverse matrix
}
data <- x$get()       # if the inverse matrix wasn't cached we reach this part
m <- solve(data)
x$setinverse(m)           # store the calculated inverse matrix in x
m               # return the inverse matrix
}
M <- matrix(c(2,3,2,2), 2, 2)
inv_A <- cacheSolve(A)
matt <- c(1:4)
dim(matt)<-c(2,2)
inv_A <- cacheSolve(A)
inv_A <- cacheSolve(matt)
inv_A <- cacheSolve(M)
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical( vect, vect2)
vect[bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2(1:20, 4, 5)
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FLASE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!5 == 7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
ints
ints > 5
?which
which(ints, ints >7)
which(ints >7)
any(ints <0)
all(ints >0)
swirl()
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list
cls_vert <- sapply(flags, class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lappy(flag_shapes, range)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, length)
info()
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function( e ) e[2])
exit
quit
Q
q
exit
exit()
quit()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL     #  m is the inverse of the matrix and will be reset to NULL
set <- function(y = matrix()) {
x <<- y
m <<- NULL
}
get <- function() { x }   # this function returns the original matrix
setinverse <- function(inverse)  { m <<- inverse }
# this is called by cacheinverse() during the first cacheinverse()
#  access and it will store the value using superassignment
getinverse <- function() { m } # this will return the cached value to cacheinverse() on
#  subsequent accesses
list(get = get, set = set,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve function will compute or retrieve the inverse of the matrix depending on
## whether the value has been previously cached
cacheSolve <- function(x, ...) {   # the input x is an object created by makeCacheMatrix
if(ncol(matt)!=nrow(matt)){message("inverse cannot be computed for non-square matrices")}
m <- x$getinverse()               # accesses the object 'x' and gets the value of the inverse
if(!is.null(m)) {              # if inverse was already cached (not NULL) ...
message("getting cached data")
return(m)                       # returns the inverse matrix
}
data <- x$get()       # if the inverse matrix wasn't cached we reach this part
m <- solve(data)
x$setinverse(m)           # store the calculated inverse matrix in x
m               # return the inverse matrix
}
matt <- c(1:4)
dim(matt)<-c(2,2)
ncol(matt)!=nrow(matt)
cacheSolve(matt)
class(matt)
makeCacheMatrix <- function(x = matrix()) {
mi <- NULL  ## matrix inversion
set <- function(y) {
x <<- y
mi <<- NULL
}
get <- function() x
setInversion <- function(Inversion) mi <<- Inversion
getInversion <- function() mi
list(set = set, get = get,
setInversion = setInversion,
getInversion = getInversion)
}
## Function cacheSolve(): calculate a matrix's inversion if it is not in cache; otherwise use cached value
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInversion()
if (!is.null(inv)) {
message("getting cached inversion")
return(inv)
}
inv <- solve(x$get())
x$setInversion( inv )
inv
}
cacheSolve(matt)
x <- matrix(1:4, 2,2)
cacheSolve(x)
library(swirl)
swirl()
sapply(flags, unique)
str(flags)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, charactor(1))
vapply(flags, class, character(1))
?tapply
table(flag$landmass)
table(flags$landmass)
table(flags$animate)
tapply(flags@animate, flags$landmass, mean)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(planes)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips(c(0,1), replace=TRUE, prob=c(0.3, 0.7))
flips<- sample(c(0,1), replace=TRUE, prob=c(0.3, 0.7))
flips<- sample(c(0,1), 100, replace=TRUE, prob=c(0.3, 0.7))
flips
apply(flips, sum)
apply(flips, summary)
sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
rbinom(c(0,1), size=100, prob=c(0.3,0.7)
)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
mean(rnorm(10))
mean(rnorm(100))
mean(rnorm(1000))
mean(rnorm(10000))
sd(rnorm(10000))
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
?colMeans
cm <- colMeans(my_pois)
dist(cm)
hist(cm)
d1 <- sys.daate()
d1 <- sys.date()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 = Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t3)
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = "days")
exit
exit()
quit()
setwd("C:/AHS/Big Data/Data Science/ProgAssignment3")
source("rankall.R")
tail(rankall("pneumonia","worst"),3)
## FUNCTION: rankall(outcome, num = "best")
## Return: the hospital that has the best, worst or num of ranking of 30-day mortality for the specified outcome in every state
rankall <- function(outcome, num = "best") {
## Read outcome data
outcome_data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
valid_outcome <- c("heart attack", "heart failure", "pneumonia")
row <- integer()
## check if inputs are valid
#if (!(is.element(state, outcome_data$State))) stop("Invalid state")
if (!(outcome %in% valid_outcome)) stop("Invalid outcome")
## get index of outcome
if(outcome =="heart attack") row <- 11
else if (outcome =="heart failure") row <- 17
else if (outcome =="pneumonia") row <- 23
else row <- 0
#Convert measure row into numeric, ignore worning
outcome_data[,row] <- suppressWarnings(as.numeric(outcome_data[,row]))
#subsetting
filtered <- outcome_data[,c(2,7,row)]
filtered <- filtered[complete.cases(filtered),]
if (is.numeric(num) & nrow(filtered) < num) return(NA)
#return(filtered)
x <- filtered
#sorting & ranking
if(num=="best") {
y<-lapply(split(x,x$State),function(x) {x[order(x[,3], x[,1]),]})
row<- 1
}
else if(num == "worst") {
y<-lapply(split(x,x$State),function(x) {x[order(-x[,3], x[,1]),]})
row<- 1
}
else if(is.numeric(num) & num<=nrow(filtered)) {
y<-lapply(split(x,x$State),function(x) {x[order(x[,3], x[,1]),]})
row<- num
}
z <- lapply(y, function(x) x[row,])
result <- cbind(do.call(rbind.data.frame, z), names(z))
result <- result[,c(1,4)]
names(result) <- c("hospital", "state")
result
}
tail(rankall("pneumonia","worst"),3)
source("submitscript3.R")
submit()
submit()
