shairo.test(fit3$residuals)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
1chisq(.95, 1)
qchisq(.95, 1)
libraryMASS
library(MASS)
View(shuttle)
?boxplot
boxplot(shuttle$wind, shuttle$use)
boxplot(shuttle$use ~ shuttle$wind)
boxplot(use ~ wind, data =shuttle)
plot(shuttle$wind, shuttle$use)
glm(use ~ auto, binormial, shuttle)
glm(use ~ auto, binomial, shuttle)
glm(use ~ wind, binomial, shuttle)
exp(-0.25131)
exp(-0.03181)
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~auto,...,data=shuttle)
fit <- glm(use~auto,binomial,data=shuttle)
fit <- glm(use~wind,binomial,data=shuttle)
fit
summary(glm(use ~ wind, binomial, shuttle))
library(MASS)
data(shuttle)
shuttle$use <- factor(shuttle$use, levels=c("noauto","auto"), labels=c(0,1))
shuttle$wind <- factor(shuttle$wind, levels=c("tail","head"), labels=c(0,1))
fit <- glm(use~auto,binomial,data=shuttle)
fit <- glm(use~wind,binomial,data=shuttle)
summary(fit)
exp(0.28313)
fit2 <- glm(use~wind+magn,binomial,data=shuttle)
summary(fit2)
exp(-3.201e-02)
summary(glm(use~wind -use,binomial,data=shuttle))
summary(glm(use ~ ., binomial, shuttle))
summary(glm(use ~ . - use, binomial, shuttle))
summary(glm(wind ~ . - use, binomial, shuttle))
data(InsectSprays)
View(InsectSprays)
summary(glm(count ~ spray,poission, InsectSprays ))
summary(glm(count ~ spray,poisson, InsectSprays ))
summary(glm(count ~ factor(spray),poisson, InsectSprays ))
exp(2.67415)
exp(2.67415)/exp(0.05588)
summary(glm(count ~ factor(spray) -1,poisson, InsectSprays ))
exp(2.67415)/exp(2.73003)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
summary(predictors)
View(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
?createDataPartition
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
training$row.names
row.names(training)
row.index(training)
qplot(row.names(training), CompressiveStrength, data = training, color = Age)
qplot(row.names(training), CompressiveStrength, data = training, color = FlyAsh)
qplot(c(1:774), CompressiveStrength, data = training, color = FlyAsh)
qplot(c(1:774), CompressiveStrength, data = training, color = Age)
qplot(c(1:774), CompressiveStrength, data = training, color = cut2(Age, g=5)
)
install.packages("Hmisc")
library(Hmisc)
qplot(c(1:774), CompressiveStrength, data = training, color = cut2(Age, g=5))
qplot(c(1:774), CompressiveStrength, data = training, color = cut2(Water, g=5))
qplot(c(1:774), CompressiveStrength, data = training, color = cut2(FlyAsh, g=5))
?hist
hist(SuperPlasticizer, training)
hist(Superplasticizer, training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
names(predictors)
names(predictors)[57:69]
names(predictors)[57:68]
?preProcess
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
names(training)[58:69]
M<-abs(cor(training[,c(58:69)]))
?diag
diag(M) <-0
which(M>0.9, arr.ind=T)
training[,c(58:69)]
M<-abs(cor(training[,c(58:59)]))
diag(M) <-0
which(M>0.9, arr.ind=T)
which(M>0.8, arr.ind=T)
M<-abs(cor(training[,c(58:69)]))
diag(M) <-0
which(M>0.5, arr.ind=T)
which(M>0.6, arr.ind=T)
which(M>0.7, arr.ind=T)
names(training)[c(6,3)]
names(training)[c(3,6)]
?prcomp
prcomp(training[,c(58:69)])
library(AppliedPredictiveModeling)
library(caret)
?preProcess
set.seed(3433)
data(AlzheimerDisease)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training[,c(58:69)], method="pca", thresh = 0.9)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training[,c(58:69)], method="pca", thresh = 0.9)
View(training)
names(training[,c(2,58:69))
names(training[,c(2,58:69)])
names(training[,c(1,58:69)])
preProcess(training[,c(1,58:69)], method="pca", thresh = 0.8)
preProcess(training[,c(58:69)], method="pca", thresh = 0.8)
names(training)[c(58:69)]
fit1 <- train(training$disgnosis ~ names(training)[c(58:69)], method = "glm", data = training)
fit1 <- train(training$disgnosis ~ training[c(58:69)], method = "glm", data = training)
fit1 <- train(training$diagnosis ~ training[c(58:69)], method = "glm", data = training)
fit1 <- train(training$diagnosis ~ names(training)[c(58:69)], method = "glm", data = training)
names(training)[c(58:69)]
fit1 <- train(training$diagnosis ~ . , method = "glm", data = training[,c(58:69)])
install.packages("e1071")
library(e1071)
fit1 <- train(training$diagnosis ~ . , method = "glm", data = training[,c(58:69)])
confusionMatrix(testing$diagnosis, predict(fit1, testing))
confusionMatrix(testing$diagnosis, predict(fit1, testing[,c(58:69)]))
preProc <- preProcess(training[,c(58:69)], method="pca", thresh = 0.8)
trainPC <- predict(preProc,training[,c(58:69)] )
fit2 <- train(training$disgnosis ~ ., method = "glm", data = trainPC)
fit2 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc,testing[,c(58:69)] )
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
preProc <- preProcess(training[,c(58:69)], method="pca", thresh = 0.9)
trainPC <- predict(preProc,training[,c(58:69)] )
fit2 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc,testing[,c(58:69)] )
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
preProc <- preProcess(training[,c(58:69)], method="pca", thresh = 0.7)
trainPC <- predict(preProc,training[,c(58:69)] )
fit2 <- train(training$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc,testing[,c(58:69)] )
confusionMatrix(testing$diagnosis, predict(fit2, testPC))
library(caret)
?train
library(AppliedPredictiveModeling)
library(caret)
set.seed(125)
data(segmentationOriginal)
set.seed(125)
data(segmentationOriginal)
View(segmentationOriginal)
TRN <- segmentationOriginal[,Case='Train']
TRN <- segmentationOriginal[Case='Train']
TRN <- segmentationOriginal[Case='Train',]
TRN <- segmentationOriginal[Case=='Train',]
TRN <- segmentationOriginal[segmentationOriginal$Case='Train',]
segmentationOriginal$Case='Train'
segmentationOriginal$Case=='Train'
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
View(TRN)
View(segmentationOriginal)
data(segmentationOriginal)
View(segmentationOriginal)
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
View(TRN)
?CART
?rpart
set.seed(125)
data(segmentationOriginal)
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
newData <- data.frame(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
newData <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
cart <- rpart(Class ~ ., data = TRN)
library(rpart)
cart <- rpart(Class ~ ., data = TRN)
predict(cart, newData)
predict(cart, newData, type="class")
View(TRN)
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
set.seed(125)
data(segmentationOriginal)
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
View(TRN)
View(segmentationOriginal)
library(rpart)
set.seed(125)
data(segmentationOriginal)
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
library(AppliedPredictiveModeling)
library(caret)
library(rpart)
set.seed(125)
data(segmentationOriginal)
TRN <- segmentationOriginal[segmentationOriginal$Case=='Train',]
View(TRN)
cart <- rpart(Class ~ ., data = TRN)
cart
newData <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
?predict
predict(cart, newData)
segmentationOriginal[segmentationOriginal$TotalIntench2 == 23000,]
TST<-segmentationOriginal[segmentationOriginal$TotalIntench2 == 23000,]
TST<-segmentationOriginal[segmentationOriginal$TotalIntench2 == 50000,]
TST<-segmentationOriginal[segmentationOriginal$FiberWidthCh1 == 10,]
plot.rpart(cart)
plot(cart)
cart
install.packages("partykit")
library(partykit)
cart.plot <- as.party(cart)
plot(cart.plot)
set.seed(125)
modFit <- train(Class ~ .,method ="rpart", data = TRN)
print(modFIt$finalModel)
print(modFit$finalModel)
library(rattle)
install.packages("rattle")
library(rattle)
newData <- data.frame(TotalIntench2 = 23000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit, newData)
fancyRpartPlot(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(AppliedPredictiveModeling)
library(caret)
library(rattle)
library(rpart.plot)
data(olive)
library(pgmm)
data(olive)
View(olive)
olive = olive[,-1]
View(olive)
modFit <- train(Area ~ .,method ="rpart", data = olive)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit, newdata)
newdata
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
View(SAheart)
dim(SAheart)[1]
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
modFit <- train(chd ~ ago + alcohol + obesity + tobacco + typea + ldl ,method ="glm", family = "binomial", data = trainSA)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl ,method ="glm", family = "binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(modFit, prediction)
missClass(modFit, prediction(modFit, testSA))
missClass(modFit, predict(modFit, testSA))
prediction <- predict(modFit, testSA)
prediction
missClass(testSA$chd, prediction)
missClass(trainSA$chd, predict(modFit, trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
summary(vowel.train)
factor(vowel.train$y)
summary(vowel.train)
vowel.train$y <- factor(vowel.train$y)
summary(vowel.train)
View(vowel.train)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox=TRUE)
set.seed(33833)
modFit <- train(y ~ ., data = vowel.train, method = "rf", prox=TRUE)
pred <- predict(modFit, vowel.test)
vowel.test$predRight <- pred == vowel.test$y
table(pred,vowel.test$y )
?varImp
varImp(modFit)
library(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
library(gbm)
modFit2 <- train(y ~ ., data = vowel.train, method = "gbm", verbose = FALSE)
pred2 <- predict(modFit2, vowel.test)
confusionMatrix(pred2, vowel.test$y)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
View(concrete)
?plot.enet
install.packages("ElemStatLearn")
library(ElemStatLearn)
?plot.enet
install.packages("elasticnet")
library(AppliedPredictiveModeling)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
lassoFit <- train( training$CompressiveStrength ~ ., method="lasso", data=training)
lassoPred <- predict(lassoFit,testing)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
library(ElemStatLearn)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassoFit <- train( training$CompressiveStrength ~ ., method="lasso", data=training)
lassoPred <- predict(lassoFit,testing)
plot.enet(lassoFit$finalModel, xvar="penalty", use.color=T)
install.packages("kernlab")
set.seed(3523)
library(e1071)
library(caret)
library(AppliedPredictiveModeling)
library(kernlab)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
fit <- train(CompressiveStrength ~ ., data = training, method = "svmRadial")
prediction <- predict(fit, testing)
accuracy(prediction, testing$CompressiveStrength)
library(forecast)
accuracy(prediction, testing$CompressiveStrength)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
# create models
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
fit3 <- train(diagnosis ~ ., data = training, method = "lda")
predict1 <- predict(fit1, newdata = testing)
predict2 <- predict(fit2, newdata = testing)
predict3 <- predict(fit3, newdata = testing)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = testing$diagnosis) # training$diagnosis?
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
install.packages("devtools")
install.packages("slidify")
install_github('slidify', 'ramnathv')
install.packages("install_github")
liberary(devtools)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(MASS)
data("EuStockMarkets")
setwd("C:/AHS/Big Data/Data Science/shiny")
View(EuStockMarkets)
library(datasets)
data()
data"SP500"
data("SP500")
View(SP500)
dax <- EuStockMarkets[1:365, 1]
dax$row_num
row_num(dax)
plot(dax, type="l", xlab="day", ylab= "Stock Price")
abline(v = 100, col="green")
library(shiny)
library(shinyapps)
shiny::deployApp()
shiny::deployApps()
shinyApps::deployApps()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
data("EuStockMarkets")
dax <- EuStockMarkets[1:365, 1]
plot(dax, type="l", xlab="Day of the Year 1991", ylab= "Stock Price")
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
as.Date(1 - 1, origin = "1991-01-01")
as.Date(10 - 1, origin = "1991-01-01")
format(as.Date(10 - 1, origin = "1991-01-01") , "%Y-%M-%d")
format(as.Date(10 - 1, origin = "1991-01-01") , "%Y-%m-%d")
format(as.Date(10 - 1, origin = "1991-01-01") , "%B %d-%Y")
format(as.Date(10 - 1, origin = "1991-01-01") , "%B %d-%Y")
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
deployApp()
